import 'dart:async';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'package:flutter/material.dart';

final thumbnail = Uint8List.fromList([
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x01, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x3b,
  0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x3a, 0x20, 0x67, 0x64, 0x2d,
  0x6a, 0x70, 0x65, 0x67, 0x20, 0x76, 0x31, 0x2e, 0x30, 0x20, 0x28, 0x75,
  0x73, 0x69, 0x6e, 0x67, 0x20, 0x49, 0x4a, 0x47, 0x20, 0x4a, 0x50, 0x45,
  0x47, 0x20, 0x76, 0x36, 0x32, 0x29, 0x2c, 0x20, 0x71, 0x75, 0x61, 0x6c,
  0x69, 0x74, 0x79, 0x20, 0x3d, 0x20, 0x39, 0x30, 0x0a, 0xff, 0xdb, 0x00,
  0x43, 0x00, 0x03, 0x02, 0x02, 0x03, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03,
  0x04, 0x03, 0x03, 0x04, 0x05, 0x08, 0x05, 0x05, 0x04, 0x04, 0x05, 0x0a,
  0x07, 0x07, 0x06, 0x08, 0x0c, 0x0a, 0x0c, 0x0c, 0x0b, 0x0a, 0x0b, 0x0b,
  0x0d, 0x0e, 0x12, 0x10, 0x0d, 0x0e, 0x11, 0x0e, 0x0b, 0x0b, 0x10, 0x16,
  0x10, 0x11, 0x13, 0x14, 0x15, 0x15, 0x15, 0x0c, 0x0f, 0x17, 0x18, 0x16,
  0x14, 0x18, 0x12, 0x14, 0x15, 0x14, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x03,
  0x04, 0x04, 0x05, 0x04, 0x05, 0x09, 0x05, 0x05, 0x09, 0x14, 0x0d, 0x0b,
  0x0d, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0x14, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x08, 0x00, 0x06,
  0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4,
  0x00, 0x15, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc4, 0x00,
  0x20, 0x10, 0x00, 0x01, 0x03, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x06, 0x00, 0x04,
  0x05, 0x12, 0x07, 0x11, 0x08, 0x22, 0x31, 0xff, 0xc4, 0x00, 0x15, 0x01,
  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xff, 0xc4, 0x00, 0x19, 0x11, 0x00,
  0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x03, 0x12, 0x21, 0xff, 0xda, 0x00,
  0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xa8,
  0x40, 0xe5, 0x5e, 0x4e, 0xe3, 0xb9, 0x72, 0x6b, 0x90, 0x91, 0x47, 0xf2,
  0xb7, 0xd0, 0xf7, 0x5c, 0x71, 0x38, 0x9c, 0x75, 0xc5, 0x93, 0x41, 0xa6,
  0xd2, 0xa7, 0x76, 0x64, 0xb5, 0xa7, 0xb0, 0xd1, 0xb0, 0x52, 0xae, 0xfe,
  0x95, 0x02, 0x7b, 0x22, 0x94, 0xa5, 0x30, 0xa3, 0xc9, 0xb7, 0x62, 0x3f,
  0xff, 0xd9
]);

class Thumbnail extends StatefulWidget {
  final Uint8List thumbnail;
  final Widget mainImage;
  final Image thumbnailImage;
  final bool editMode;
  final EdgeInsetsGeometry? padding;

  Thumbnail(
      {super.key,
      required this.thumbnail,
      required this.mainImage,
      this.editMode = false,
      this.padding})
      : thumbnailImage = Image.memory(thumbnail);

  @override
  State<Thumbnail> createState() => ThumbnailState();
}

class ThumbnailState extends State<Thumbnail> {
  ui.Image? _image;
  Completer<ui.Image>? completer;

  @override
  void initState() {
    completer = Completer<ui.Image>();
    widget.thumbnailImage.image
        .resolve(const ImageConfiguration())
        .addListener(ImageStreamListener((image, synchronousCall) {
      if (!completer!.isCompleted) {
        completer!.complete(image.image);
      }
      if (_image == null) {
        setState(() {
          _image = image.image;
        });
      }
      image.dispose();
    }));
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(alignment: Alignment.center, children: [
      widget.thumbnailImage,
      Offstage(
          offstage: _image == null, child: makeIconButton(context, _image)),
    ]);
  }

  static int minSize(ui.Image? image) {
    if (image == null) {
      return 2;
    }
    return image.width < image.height ? image.width : image.height;
  }

  Widget makeIconButton(BuildContext context, ui.Image? image) {
    final imageMinSize = minSize(image);
    return IconButton(
      padding: widget.padding,
      onPressed: () {
        if (!widget.editMode) {
          Navigator.of(context).push(MaterialPageRoute(
              builder: (context) => Scaffold(
                  appBar: AppBar(title: const Text('Main Image')),
                  body: widget.mainImage)));
        }
      },
      icon:
          widget.editMode ? const Icon(Icons.edit) : const Icon(Icons.zoom_in),
      iconSize: imageMinSize >= 64 ? 48.0 : imageMinSize / 2,
      splashRadius: imageMinSize / 2,
      color: Colors.blueGrey.withOpacity(0.8),
      hoverColor: Colors.lightBlue.withOpacity(0.3),
    );
  }
}

class WidgetTestApp extends StatelessWidget {
  const WidgetTestApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        home: Scaffold(
      body: SafeArea(
          child: Thumbnail(
              editMode: false,
              thumbnail: thumbnail,
              mainImage: Image(
                image: MemoryImage(thumbnail),
              ))),
      floatingActionButton: FloatingActionButton(
        onPressed: () {},
        child: const Icon(Icons.question_mark),
      ),
    ));
  }
}

void main() {
  runApp(const WidgetTestApp());
}
